<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - 怕什么真理无穷,进一寸有一寸的欢喜</title><link>https://vincent--li.github.io/posts/</link><description>All Posts | 怕什么真理无穷,进一寸有一寸的欢喜</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>q315744068@gmail.com (Vincent)</managingEditor><webMaster>q315744068@gmail.com (Vincent)</webMaster><lastBuildDate>Wed, 21 Sep 2022 22:41:47 +0800</lastBuildDate><atom:link href="https://vincent--li.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>CS:APP 研读（一）</title><link>https://vincent--li.github.io/2022/09/cs_app_startup/</link><pubDate>Wed, 21 Sep 2022 22:41:47 +0800</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2022/09/cs_app_startup/</guid><description>Brief Links CS:APP Labs CS:APP K&amp;amp;R</description></item><item><title>Markdown复习</title><link>https://vincent--li.github.io/2022/09/markdown_review/</link><pubDate>Sat, 17 Sep 2022 21:49:25 +0800</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2022/09/markdown_review/</guid><description>基础语法 标题 Markdown支持6中级别的标题, 对应HTML标签h1-h6 1 2 3 4 5 6 # h1 ## h2 ### h3 #### h4 ##### h5 ###### h6 此外, markdown还支持简</description></item><item><title>Java Class文件结构</title><link>https://vincent--li.github.io/2019/08/java_class_file_analysis/</link><pubDate>Thu, 01 Aug 2019 00:59:28 +0000</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2019/08/java_class_file_analysis/</guid><description>语言无关性 文件结构 u1 = 1byte 类型 名称 数量 u4 magic 1 u2 minor_version 1 u2 major_version 1 u2 constant_pool_count 1 cp_info constant_pool constant_pool_count-1 u2 access_flags 1 u2 this_class 1 u2 super_class 1 u2 interfaces_count 1 u2 interfaces interfaces_count u2 fields_count 1 field_info fields fields_count u2 methods_count 1 method_info methods methods_count u2 attribute_count 1 attribute_info attributes attributes_count magic u4 0xCAFEEBABE constant_pool_count</description></item><item><title>JVM锁</title><link>https://vincent--li.github.io/2019/07/jvm_lock/</link><pubDate>Sat, 20 Jul 2019 21:26:30 +0000</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2019/07/jvm_lock/</guid><description>线程安全 多线程网站统计访问人数 使用锁, 维护计数器的串行访问与安全性 多线程方位ArrayList 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</description></item><item><title>Java堆分析</title><link>https://vincent--li.github.io/2019/07/jvm_heap_analysis/</link><pubDate>Sun, 14 Jul 2019 22:25:46 +0000</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2019/07/jvm_heap_analysis/</guid><description>MAT使用基础 Memory Analyse Tool 浅堆(Shallow Heap) 一个对象结构所占用的内存大小 3个int类型以及一个引用类型合计占用3*4+4=16字节, 再加上对象</description></item><item><title>JVM性能监控工具</title><link>https://vincent--li.github.io/2019/07/jvm_performance_monitor/</link><pubDate>Sat, 13 Jul 2019 20:59:16 +0000</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2019/07/jvm_performance_monitor/</guid><description>系统性能监控 uptime 系统时间 运行时间 连接数: 每个终端算一个连接数 1/5/15分钟系统平均负载 top 第一行同uptime cpu内存 每个进程占CPU的情况</description></item><item><title>Java 类装载器</title><link>https://vincent--li.github.io/2019/07/java_class_loader/</link><pubDate>Tue, 09 Jul 2019 23:09:04 +0000</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2019/07/java_class_loader/</guid><description>class装载验证流程 加载 装载类的第一阶段 取得类的二进制流 转为方法区数据结构 在Java堆中生成对应的java.lang.Class对象 链接 验</description></item><item><title>Java GC参数</title><link>https://vincent--li.github.io/2019/07/java_gc_params/</link><pubDate>Tue, 09 Jul 2019 21:38:20 +0000</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2019/07/java_gc_params/</guid><description>堆回顾 串行收集器 最古老, 最稳定 效率高 可能会产生较长的停顿 -XX:+UseSerialGC 新生代,老年代使用串行回收 新生代复制算法 老年代标记-压缩 并行收集器 ParNew -XX:+UseParNewGC 新生代并行,</description></item><item><title>Java GC算法与种类</title><link>https://vincent--li.github.io/2019/07/java_gc_algo_n_category/</link><pubDate>Tue, 09 Jul 2019 19:58:30 +0000</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2019/07/java_gc_algo_n_category/</guid><description>GC的概念 java中,GC的对象是堆空间和永久区 GC算法 引用计数法 没有被java采用 通过引用计数来回收垃圾, 但是有问题: 引用和去引用伴随加法</description></item><item><title>JVM常用运行参数</title><link>https://vincent--li.github.io/2019/07/jvm_common_opts/</link><pubDate>Mon, 08 Jul 2019 20:23:02 +0000</pubDate><author>Vincent</author><guid>https://vincent--li.github.io/2019/07/jvm_common_opts/</guid><description>Trace跟踪参数 -verbose:gc -XX:+PrintGC 可以打印GC的简要信息 -XX:+PrintGCDetails 打印GC详细信息 -XX:+PrintGCTimeStamps 打印GC发生的时间戳 -Xloggc:log/gc.log 指定GC log的位置,以文件输出, 帮助开发人员分析问题</description></item></channel></rss>