<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>参数调优 on</title><link>/tags/%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</link><description>Recent content in 参数调优 on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 08 Jul 2019 20:23:02 +0000</lastBuildDate><atom:link href="/tags/%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM常用运行参数</title><link>/posts/java/jvm_common_opts/</link><pubDate>Mon, 08 Jul 2019 20:23:02 +0000</pubDate><guid>/posts/java/jvm_common_opts/</guid><description>Trace跟踪参数 # -verbose:gc -XX:+PrintGC 可以打印GC的简要信息 -XX:+PrintGCDetails 打印GC详细信息 -XX:+PrintGCTimeStamps 打印GC发生的时间戳 -Xloggc:log/gc.log 指定GC log的位置,以文件输出, 帮助开发人员分析问题 -XX:+PrintHeapAtGC 每一次GC后,都打印堆信息 -XX:+TraceClassLoading 监控类的加载 -XX:+PrintClassHistogram 按下Ctrl+Break后, 打印类的信息. 分别显示的是: 序号, 实例数量, 总大小, 类型 堆的分配参数 # -Xmx 最大堆 -Xms 最小堆 System.out.print(&amp;#34;Xmx=&amp;#34;); System.out.println(Runtime.getRuntime().maxMemory()/1024/1024 + &amp;#34;M&amp;#34;); System.out.print(&amp;#34;free mem=&amp;#34;); System.out.println(Runtime.getRuntime().freeMemory()/1024/1024 + &amp;#34;M&amp;#34;); System.out.print(&amp;#34;total mem=&amp;#34;); System.out.println(Runtime.getRuntime().totalMemory()/1024/1024 + &amp;#34;M&amp;#34;); -Xmn 设置新生代大小,是一个绝对值 -XX:NewRatio 按比例设置新生代的比例: 新生代(eden + 2*s)和老年代(不包含永久区)的比值. 例如: 4表示 新生代:老年代=1:4, 即年轻代占堆的1/5 -XX:SurvivorRatio 设置两个Survivor区和eden的比. 例如: 8表示 两个Survivor:eden = 2:8, 即一个Survivor占年轻代的1/10 /* 通过设置不同的JVM参数观察GC的情况: 合理减少幸存代大小提高GC效率, 减少GC -Xmx20m -Xms20m -Xmn1m -XX:+PrintGCDetail 不会触发GC,全部分配在老年代 -Xmx20m -Xms20m -Xmn15m -XX:+PrintGCDetails 不会触发GC,全部分配在eden,老年代没有使用 -Xmx20m -Xms20m -Xmn7m -XX:+PrintGCDetails 进行了2次新生代GC, s0,s1太小需要老年代担保 -Xmx20m -Xms20m -Xmn7m -XX:SurvivorRatio=2 -XX:+PrintGCDetails 进行了3次新生代GC, s0,s1增大 -Xmx20m -Xms20m -XX:NewRatio=1 -XX:SurvivorRatio=2-XX:+PrintGCDetails */ public static void main(String[] args){ byte[] b= null; for(int i=0;i&amp;lt;10;i++){ b = new byte[1*1024*1024]; } } -XX:+HeapDumpOnOutOfMemoryError OOM时导出堆到文件 -XX:+HeapDumpPath 导出OOM的路径 /* -Xmx20m -Xms5m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=d:/a.</description></item></channel></rss>