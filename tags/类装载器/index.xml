<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>类装载器 on</title><link>/tags/%E7%B1%BB%E8%A3%85%E8%BD%BD%E5%99%A8/</link><description>Recent content in 类装载器 on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 09 Jul 2019 23:09:04 +0000</lastBuildDate><atom:link href="/tags/%E7%B1%BB%E8%A3%85%E8%BD%BD%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 类装载器</title><link>/posts/java/java_class_loader/</link><pubDate>Tue, 09 Jul 2019 23:09:04 +0000</pubDate><guid>/posts/java/java_class_loader/</guid><description>class装载验证流程 # 加载 # 装载类的第一阶段 取得类的二进制流 转为方法区数据结构 在Java堆中生成对应的java.lang.Class对象 链接 # 验证 # 目的: 保证Class流的格式是正确的
文件格式的验证 持否以0xCAFEBABE开头 版本号时候合理 元数据验证 是否有父类 继承了final类? 非抽象类是否实现了所有的抽象方法 字节码验证(很复杂) 运行检查 栈数据类型和操作码数据参数吻合 跳转指令指定到合理的位置 符号引用验证 常量池中描述类是否存在 访问的方法或字段是否存在且有足够的权限 准备 # 分配内存,并为类设置初始值(方法区中) public static int v=1 在准备阶段中, v会被设置为0 在初始化的clinit中才会被设置为1 对于static final类型, 在准备阶段就会被赋为正常的值 public static final int v=1 解析 # 符号引用替换为直接引用 符号引用: 字符串引用对象不一定被加载 直接引用: 指针或者地址偏移量, 引用对象一定在内存 初始化 # 执行类构造器clinit static变量 赋值语句 static{}语句 子类的clinit调用前保证父类的clinit被调用 clinit是线程安全的 什么是类装载器ClassLoader # ClassLoader是一个抽象类 ClassLoader的实例将读入Java字节码将类装载到JVM中 ClassLoader可以定制,满足不同的字节码流获取方式 ClassLoader负责类装在过程中的加载阶段 ClassLoader的重要方法 # //载入并返回一个Class public Class&amp;lt;?</description></item></channel></rss>